package com.herve.ocgames.core;

import com.herve.ocgames.core.enums.ConfigMode;
import com.herve.ocgames.core.enums.GameFromList;
import com.herve.ocgames.core.enums.GameVersion;
import com.herve.ocgames.core.factories.PlayerFactory;
import com.herve.ocgames.core.interfaces.GameInterface;
import com.herve.ocgames.utils.StringTool;
import com.herve.ocgames.utils.Text;
import com.herve.ocgames.utils.UserInteraction;

import static com.herve.ocgames.Main.consoleLogger;
import static com.herve.ocgames.Main.devLogger;

public class Game implements GameInterface {

    private GameFromList gameFromList;
    private GameVersion version;
    private String mode;
    private boolean defender;
    private boolean challenger;
    private Player player;
    private boolean debug = false;
    private int debugVerbosity = 2 ;
    private String [][] langSubstitutes;

    /**
     *     Constructor
     */
    public Game(){
        int gameMode;
        try {
            this.debug = StringTool.match(PropertyHelper.config("core.debug"), "^([Tt]rue|[Yy]es|1)$");
            gameFromList = GameFromList.valueOf("JEU" + GameChoice.getGameId());
            String versionValue = (PropertyHelper.config(gameFromList.getName() + ".version")).toUpperCase();
            version = GameVersion.valueOf(versionValue);
            gameMode = GameChoice.getGameMode();
            switch (gameMode){
                case 1 :
                    mode = lang("select.challenger");
                    defender = false;
                    challenger = true;
                    break;
                case 2 :
                    mode = lang("select.defender");
                    defender = true;
                    challenger = false;
                    break;
                case 3 :
                    mode = lang("select.dual");
                    defender = true;
                    challenger = true;
                    break;
            }
            ConfigMode configMode = ConfigMode.valueOf(PropertyHelper.config("config.mode").toUpperCase());
            //debugV2(System.out.println(configMode.toString()));
            PropertyHelper.loadGame("JEU" + GameChoice.getGameId(), configMode);
            player = PlayerFactory.getPlayer(GameChoice.getGameId());
        } catch (NullPointerException e) {
            // we stop all before GameCache.initialize, so GameCache.isFailed() ==  true, and game is stopped
            consoleLogger.fatal(lang("error.game.instanciate"));
            return;
        }
        GameCache.initialize(gameMode);
        this.langSubstitutes = new String[][] {{"VAR_NAME", GameCache.getGameName()},
                {"VAR_MODE", this.mode},
                {"VAR_CODE_LENGTH", PropertyHelper.config("game.codeLength")},
                {"VAR_DIGITS_IN_GAME", PropertyHelper.config("game.digitsInGame")},
                {"VAR_LAST_DIGIT", String.valueOf(Integer.parseInt(PropertyHelper.config("game.digitsInGame")) -1 )},
                {"VAR_DIGIT_MAX_REPEAT", PropertyHelper.config("game.digitMaxRepeat")},
                {"VAR_EQUAL", "="}
        };
    }

    /**
     * Constructor overloaded only for test - provide a way to predict secret code generated by computer
     * @param computerSecretCode
     */
    public Game(String computerSecretCode){
        // Constructor to force computerSecretCode without random - !!!! only for test !!!!
        super();
        GameCache.setComputerCode(computerSecretCode);
    }

    /**
     * Only a shortcut to access language getter in PropertyHelper
     * @param key language key to get from PropertyHelper
     * @return language string value from PropertyHelper
     */
    private static String lang(String key){
        return PropertyHelper.language(key);
    }

    /**
     * Overloaded version of the previous method, giving the key and array substitution{{"VAR_SEARCH","string replace"},...}
     * compose a string from PropertyHelper language value with dynamic data
     * @param key PropertyHelper language key
     * @param arraySubstitutions array String[][] {{"VAR_SEARCH","string replace"},...}
     * @return a String, messages, log,...
     */
    private static String lang(String key, String[][] arraySubstitutions){
        return PropertyHelper.language(key, arraySubstitutions);
    }

    /**
     * The public method for this class. it organizes game's events with calling player actions
     */
    public void start(){
        if ( GameCache.isFailed() ) return;
        debugV3("Execute all lines except challenger lines if we play as defender, except challengers if we play as defender");
        this.welcome();
        if (this.challenger) player.letComputerGenerateSecretCode();
        if (this.debug) UserInteraction.displayMessage("%n");
        if (this.defender) player.submitSecretCode();
        //UserInteraction.clearConsole();
        do {
            if (this.challenger) player.submitAttempt();
            if (this.challenger) player.getComputerEvaluation();
            if (this.challenger && this.defender) UserInteraction.displayMessage("%n");
            if (this.defender) player.getComputerAttempt();
            if (this.defender) player.submitEvaluation();
            if (this.challenger && this.defender) UserInteraction.displayMessage("%n");
            GameCache.nextTurn();
        } while (! GameCache.end());
        UserInteraction.displayMessage("%n");
        this.goodbye();
    }

    /**
     * Begin of the game - message, rules,...
     */
    private void welcome(){
        // Display message and rules, when begin the game
        String message =  "%n" + Text.effect(lang("game.start", this.langSubstitutes),"background",
                "bright_black") + "%n";
        message += Text.effect(lang( GameCache.getGameName() + ".rules." + this.mode, this.langSubstitutes),
                PropertyHelper.config("color.rules"));
        UserInteraction.displayMessage(message);
    }

    /**
     * End of the game
     */
    private void goodbye(){
        if ( GameCache.isFailed() ) return;
        // Display message when end the game
        String endMessage;
        if (GameCache.isWinner()) {
            endMessage = Text.effect(lang("game.winner", this.langSubstitutes), PropertyHelper.config("color.winner"));
        } else {
            endMessage = Text.effect(lang("game.looser", this.langSubstitutes), PropertyHelper.config("color.looser"));
        }
        UserInteraction.displayMessage(endMessage);
    }

    // debug when verbosity level is equal to 1 - Should be used to exceptionnaly log debug message in the console
    //private void debugV1(String message){ if (this.debug && this.debugVerbosity > 0) devConsoleLogger.debug(message); }

    // debug when verbosity level is up to 2 - Should be used to log computed value in file
    // private void debugV2(String message){ if (this.debug && this.debugVerbosity > 1) devLogger.debug(message); }

    // ***** provide a way to debug and comment code *****
    private void debugV3(String message){
        // debug when verbosity level is up to 3 - Should be used to log message as comment in the code
        if (this.debug && this.debugVerbosity > 2) devLogger.debug(message);
    }

    // debug when verbosity level is up to 4 - Should be exceptionnaly used to log computed value in loop
    // private void debugV4(String message){ if (this.debug && this.debugVerbosity > 3) devLogger.debug(message); }

}
